{"ast":null,"code":"import axios from 'axios';\n// Create an axios instance with default settings\ncon;\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Optionally, add request/response interceptors\napiClient.interceptors.request.use(config => {\n  // Modify request config if needed, e.g., add auth token\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napiClient.interceptors.response.use(response => response, error => {\n  // Handle errors globally\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","con","apiClient","create","baseURL","API_URL","headers","interceptors","request","use","config","error","Promise","reject","response"],"sources":["/Users/lu/Code/meal-log-app/web/src/service/apiClient.ts"],"sourcesContent":["import axios from 'axios';\n// Create an axios instance with default settings\ncon\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Optionally, add request/response interceptors\napiClient.interceptors.request.use(\n  (config) => {\n    // Modify request config if needed, e.g., add auth token\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle errors globally\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient; \n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACAC,GAAG;AACH,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDT,SAAS,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAChCK,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeT,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}